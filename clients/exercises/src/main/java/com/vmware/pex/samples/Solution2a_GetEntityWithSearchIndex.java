package com.vmware.pex.samples;

/* **********************************************************
 * Copyright 2009 VMware, Inc.  All rights reserved.
 * **********************************************************/

/* **********************************************************************************************
* DISCLAIMER. THIS CODE IS PROVIDED TO YOU "AS IS" WITHOUT WARRANTIES OR CONDITIONS 
* OF ANY KIND, WHETHER ORAL OR WRITTEN, EXPRESS OR IMPLIED. THE AUTHOR SPECIFICALLY 
* DISCLAIMS ANY IMPLIED WARRANTIES OR CONDITIONS OF MERCHANTABILITY, SATISFACTORY 
* QUALITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. 
 * **********************************************************************************************/

/**
 * This class can be used to search for the managed entity.
 * This class uses the client side code generated by AXIS.
 * This class will not compile with JAX-WS / JAXB generated client side code.
 * 
 * Usage: java GetEntityWithSearchIndex <host> <username> <password> <isVM> <searchType> <searchParam>
 * 
 * host     - URL of the Virtual Center Server host
 *            https://<Server host name / ip>/sdk
 * username - User name
 * password - Password
 * isVM     - boolean to indicate whether it is a VM
 * searchType  - Type of search (DatastorePath | DnsName | InventoryPath | Ip | Uuid | Child)
 * searchParam - Parameter for the search
 *
 * @author bparimi
 */

import java.net.MalformedURLException;
import java.net.URL;

import com.vmware.vim25.DynamicProperty;
import com.vmware.vim25.ManagedObjectReference;
import com.vmware.vim25.ObjectContent;
import com.vmware.vim25.ObjectSpec;
import com.vmware.vim25.PropertyFilterSpec;
import com.vmware.vim25.PropertySpec;
import com.vmware.vim25.ServiceContent;
import com.vmware.vim25.VimPortType;
import com.vmware.vim25.VimServiceLocator;

public class Solution2a_GetEntityWithSearchIndex {
	private static final ManagedObjectReference SIMO_REF = new ManagedObjectReference();
	private static ManagedObjectReference PROP_COLLECTOR;
	private static ManagedObjectReference ROOT_FOLDER;
	private static ManagedObjectReference SEARCH_INDEX;
	private static VimPortType VIM_PORT;
	private static ServiceContent SERVICE_CONTENT;
	private static final String STR_SERVICE_INSTANCE = "ServiceInstance";
	private static String VIM_HOST;
	private static String USER_NAME;
	private static String PASSWORD;

	/**
	 * Set the managed object reference type, and value to ServiceInstance
	 */
	private static void initSIMORef() {
		SIMO_REF.setType(STR_SERVICE_INSTANCE);
		SIMO_REF.set_value(STR_SERVICE_INSTANCE);
	}

	/**
	 * 
	 * @param url
	 *            The URL of the Virtual Center Server
	 * 
	 *            https://<Server IP / host name>/sdk
	 * 
	 *            The method establishes connection with the web service port on
	 *            the server. This is not to be confused with the session
	 *            connection.
	 * 
	 */
	private static void initVimPort(String url) {
		VimServiceLocator locator = new VimServiceLocator();
		locator.setMaintainSession(true);
		try {
			VIM_PORT = locator.getVimPort(new URL(url));
		} catch (MalformedURLException mue) {
			mue.printStackTrace();
		} catch (Exception se) {
			se.printStackTrace();
		}
	}

	/*
	 * This method calls all the initialization methods required in order.
	 */
	private static void initAll() {
		// These following methods have to be called in this order.
		initSIMORef();
		initVimPort(VIM_HOST);
		initServiceContent();
		try {
			connect(VIM_HOST, USER_NAME, PASSWORD);
		} catch (Exception e) {
			e.printStackTrace();
		}

		initPropertyCollector();
		initRootFolder();
		initSearchIndex();
	}

	private static void initServiceContent() {
		if (SERVICE_CONTENT == null) {
			try {
				SERVICE_CONTENT = VIM_PORT.retrieveServiceContent(SIMO_REF);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private static void initPropertyCollector() {
		if (PROP_COLLECTOR == null) {
			try {
				PROP_COLLECTOR = SERVICE_CONTENT.getPropertyCollector();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private static void initRootFolder() {
		if (ROOT_FOLDER == null) {
			try {
				ROOT_FOLDER = SERVICE_CONTENT.getRootFolder();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private static void initSearchIndex() {
		if (SEARCH_INDEX == null) {
			try {
				SEARCH_INDEX = SERVICE_CONTENT.getSearchIndex();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 
	 * @param url
	 *            The URL of the server
	 * @param uname
	 *            The user name for the session
	 * @param pword
	 *            The password for the user
	 * 
	 *            Establishes session with the virtual center server
	 * 
	 * @throws Exception
	 */
	private static void connect(String url, String uname, String pword)
			throws Exception {
		VIM_PORT.login(SERVICE_CONTENT.getSessionManager(), uname, pword, null);
	}

	/**
	 * Disconnects the user session
	 * 
	 * @throws Exception
	 */
	private static void disconnect() throws Exception {
		VIM_PORT.logout(SERVICE_CONTENT.getSessionManager());
	}

	public static ManagedObjectReference getManagedEntity(boolean isVM,
			String searchType, String searchParam) throws Exception {
		ManagedObjectReference retVal = null;
		if (isVM) {
			if (searchType.equalsIgnoreCase("DatastorePath")) {
				retVal = VIM_PORT.findByDatastorePath(SERVICE_CONTENT
						.getSearchIndex(), null, searchParam);
			} else if (searchType.equalsIgnoreCase("DnsName")) {
				retVal = VIM_PORT.findByDnsName(SERVICE_CONTENT
						.getSearchIndex(), null, searchParam, true);
			} else if (searchType.equalsIgnoreCase("InventoryPath")) {
				retVal = VIM_PORT.findByInventoryPath(SERVICE_CONTENT
						.getSearchIndex(), searchParam);
			} else if (searchType.equalsIgnoreCase("IP")) {
				retVal = VIM_PORT.findByIp(SERVICE_CONTENT.getSearchIndex(),
						null, searchParam, true);
			} else if (searchType.equalsIgnoreCase("Uuid")) {
				retVal = VIM_PORT.findByUuid(SERVICE_CONTENT.getSearchIndex(),
						null, searchParam, true, true);
			}
		} else {
			if (searchType.equalsIgnoreCase("DatastorePath")) {
				System.out
						.println("Find by DatastorePath is only for finding Virtual Machines");
			} else if (searchType.equalsIgnoreCase("DnsName")) {
				retVal = VIM_PORT.findByDnsName(SERVICE_CONTENT
						.getSearchIndex(), null, searchParam, false);
			} else if (searchType.equalsIgnoreCase("InventoryPath")) {
				retVal = VIM_PORT.findByInventoryPath(SERVICE_CONTENT
						.getSearchIndex(), searchParam);
			} else if (searchType.equalsIgnoreCase("IP")) {
				retVal = VIM_PORT.findByIp(SERVICE_CONTENT.getSearchIndex(),
						null, searchParam, false);
			} else if (searchType.equalsIgnoreCase("Uuid")) {
				retVal = VIM_PORT.findByUuid(SERVICE_CONTENT.getSearchIndex(),
						null, searchParam, false, false);
			}
		}

		return retVal;
	}

	/**
	 * Demonstrate how to use the PropertyCollector to retrieve properties of a
	 * managed object when the managed object reference is known.
	 * 
	 * Retrieves the Virtual machine properties.
	 */
	public static void getVMInfo(ManagedObjectReference mor) {
		try {
			// Create Property Spec
			PropertySpec propertySpec = new PropertySpec();
			propertySpec.setAll(Boolean.FALSE);
			propertySpec
					.setPathSet(new String[] { "name", "runtime.powerState" });
			propertySpec.setType("VirtualMachine");
			PropertySpec[] propertySpecs = new PropertySpec[] { propertySpec };

			// Now create Object Spec
			ObjectSpec objectSpec = new ObjectSpec();
			objectSpec.setObj(mor);
			ObjectSpec[] objectSpecs = new ObjectSpec[] { objectSpec };

			// Create PropertyFilterSpec using the PropertySpec and ObjectPec
			// created above.
			PropertyFilterSpec propertyFilterSpec = new PropertyFilterSpec();
			propertyFilterSpec.setPropSet(propertySpecs);
			propertyFilterSpec.setObjectSet(objectSpecs);

			PropertyFilterSpec[] propertyFilterSpecs = new PropertyFilterSpec[] { propertyFilterSpec };

			ObjectContent[] oCont = VIM_PORT.retrieveProperties(PROP_COLLECTOR,
					propertyFilterSpecs);
			if (oCont != null) {
				// System.out.println("ObjectContent Length : " + oCont.length);
				StringBuilder sb = new StringBuilder();
				for (ObjectContent oc : oCont) {
					DynamicProperty[] dps = oc.getPropSet();
					if (dps != null) {
						for (DynamicProperty dp : dps) {
							if (dp.getName().equalsIgnoreCase("name")) {
								sb.append(dp.getVal());
								sb.append(" : ");
							} else {
								sb.append(dp.getVal());
								sb.append("\n");
							}
							// System.out.println(dp.getName() + " : " +
							// dp.getVal());
						}
					}
				}
				System.out.println(sb.toString());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void printUsage() {
		System.out
				.println("Usage: java GetEntityWithSearchIndex <host> <username> <password> <isVM> <searchType> <searchParam>");
	}

	/**
	 * @param args
	 *            arg[0] - URL of the Virtual Center Server host https://<Server
	 *            host name / ip>/sdk arg[1] - User name arg[2] - Password
	 *            arg[3] - isVM arg[4] - searchType (DatastorePath | DnsName |
	 *            InventoryPath | Ip | Uuid) arg[5] - searchParam
	 */
	public static void main(String[] args) {
		System.setProperty(
				"org.apache.axis.components.net.SecureSocketFactory",
				"org.apache.axis.components.net.SunFakeTrustSocketFactory");

		if (args.length < 6) {
			printUsage();
		} else {
			try {
				VIM_HOST = args[0];
				USER_NAME = args[1];
				PASSWORD = args[2];

				initAll();

				boolean isVM = Boolean.parseBoolean(args[3]);
				String searchType = args[4].trim();
				String searchParam = args[5].trim();

				ManagedObjectReference retVal = getManagedEntity(isVM,
						searchType, searchParam);

				if (retVal == null) {
					System.out
							.println("Search did not return the entity ..........................");
				} else {
					System.out.println(retVal.getType() + " : "
							+ retVal.get_value());
					if (retVal.getType().equalsIgnoreCase("VirtualMachine")) {
						getVMInfo(retVal);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					disconnect();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
}