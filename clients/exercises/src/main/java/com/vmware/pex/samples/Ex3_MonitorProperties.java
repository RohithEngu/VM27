package com.vmware.pex.samples;

/* **********************************************************
 * Copyright 2009 VMware, Inc.  All rights reserved.
 * **********************************************************/

/* **********************************************************************************************
* DISCLAIMER. THIS CODE IS PROVIDED TO YOU "AS IS" WITHOUT WARRANTIES OR CONDITIONS 
* OF ANY KIND, WHETHER ORAL OR WRITTEN, EXPRESS OR IMPLIED. THE AUTHOR SPECIFICALLY 
* DISCLAIMS ANY IMPLIED WARRANTIES OR CONDITIONS OF MERCHANTABILITY, SATISFACTORY 
* QUALITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. 
 * **********************************************************************************************/
 
/**
 * This class demonstrates how to monitor the changes to properties of managed 
 * objects.
 * 
 * This class uses the client side code generated by AXIS.
 * This class will not compile with JAX-WS / JAXB generated client side code.
 * 
 * Usage: java Connect <host> <username> <password> <vmname>
 * 
 * host     - URL of the Virtual Center Server / ESX host
 *            https://<Server host name / ip>/sdk
 * username - User name
 * password - Password
 * vmname   - Name of the VM
 *
 * @author bparimi
 */
import java.net.MalformedURLException;
import java.net.URL;

import com.vmware.vim25.DynamicProperty;
import com.vmware.vim25.ManagedObjectReference;
import com.vmware.vim25.ObjectContent;
import com.vmware.vim25.ObjectSpec;
import com.vmware.vim25.ObjectUpdate;
import com.vmware.vim25.PropertyChange;
import com.vmware.vim25.PropertyFilterSpec;
import com.vmware.vim25.PropertyFilterUpdate;
import com.vmware.vim25.PropertySpec;
import com.vmware.vim25.SelectionSpec;
import com.vmware.vim25.ServiceContent;
import com.vmware.vim25.TraversalSpec;
import com.vmware.vim25.UpdateSet;
import com.vmware.vim25.VimPortType;
import com.vmware.vim25.VimServiceLocator;

public class Ex3_MonitorProperties {

	private static final ManagedObjectReference SIMO_REF = new ManagedObjectReference();
	private static VimPortType VIM_PORT;
	private static ServiceContent SERVICE_CONTENT;
	private static final String STR_SERVICE_INSTANCE = "ServiceInstance";
	private static String VIM_HOST;
	private static String USER_NAME;
	private static String PASSWORD;
	private static ManagedObjectReference PROP_COLLECTOR;
	private static ManagedObjectReference ROOT_FOLDER;

	/**
	 * Set the managed object reference type, and value to ServiceInstance
	 */
	private static void initSIMORef() {
		SIMO_REF.setType(STR_SERVICE_INSTANCE);
		SIMO_REF.set_value(STR_SERVICE_INSTANCE);
	}

	/**
	 * 
	 * @param url
	 *            The URL of the Virtual Center Server
	 * 
	 *            https://<Server IP / host name>/sdk
	 * 
	 *            The method establishes connection with the web service port on
	 *            the server. This is not to be confused with the session
	 *            connection.
	 * 
	 */
	private static void initVimPort(String url) {
		VimServiceLocator locator = new VimServiceLocator();
		locator.setMaintainSession(true);
		try {
			VIM_PORT = locator.getVimPort(new URL(url));
			((org.apache.axis.client.Stub) VIM_PORT).setTimeout(1200000);
		} catch (MalformedURLException mue) {
			mue.printStackTrace();
		} catch (Exception se) {
			se.printStackTrace();
		}
	}

	/*
	 * This method calls all the initialization methods required in order.
	 */
	private static void initAll() {
		// These following methods have to be called in this order.
		initSIMORef();
		initVimPort(VIM_HOST);
		initServiceContent();
		try {
			connect(VIM_HOST, USER_NAME, PASSWORD);
		} catch (Exception e) {
			e.printStackTrace();
		}

		initPropertyCollector();
		initRootFolder();

	}

	private static void initServiceContent() {
		if (SERVICE_CONTENT == null) {
			try {
				SERVICE_CONTENT = VIM_PORT.retrieveServiceContent(SIMO_REF);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private static void initPropertyCollector() {
		if (PROP_COLLECTOR == null) {
			try {
				PROP_COLLECTOR = SERVICE_CONTENT.getPropertyCollector();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private static void initRootFolder() {
		if (ROOT_FOLDER == null) {
			try {
				ROOT_FOLDER = SERVICE_CONTENT.getRootFolder();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 
	 * @param url
	 *            The URL of the server
	 * @param uname
	 *            The user name for the session
	 * @param pword
	 *            The password for the user
	 * 
	 *            Establishes session with the virtual center / ESX server
	 * 
	 * @throws Exception
	 */
	private static void connect(String url, String uname, String pword)
			throws Exception {
		VIM_PORT.login(SERVICE_CONTENT.getSessionManager(), uname, pword, null);
	}

	/**
	 * Disconnects the user session
	 * 
	 * @throws Exception
	 */
	private static void disconnect() throws Exception {
		VIM_PORT.logout(SERVICE_CONTENT.getSessionManager());
	}

	/**
	 * 
	 * @return TraversalSpec specification to get to the VirtualMachine managed
	 *         object.
	 */
	public static TraversalSpec getVMTraversalSpec() {
		// Create a traversal spec that starts from the 'root' objects
		// and traverses the inventory tree to get to the VirtualMachines.
		// Build the traversal specs bottoms up

		// Traversal to get to the vmFolder from DataCenter
		TraversalSpec dataCenterToVMFolder = new TraversalSpec();
		dataCenterToVMFolder.setName("DataCenterToVMFolder");
		dataCenterToVMFolder.setType("Datacenter");
		dataCenterToVMFolder.setPath("vmFolder");
		dataCenterToVMFolder.setSkip(false);
		SelectionSpec sSpec = new SelectionSpec();
		sSpec.setName("VisitFolders");
		SelectionSpec[] sSpecs = new SelectionSpec[] { sSpec };
		dataCenterToVMFolder.setSelectSet(sSpecs);

		// TraversalSpec to get to the DataCenter from rootFolder
		TraversalSpec traversalSpec = new TraversalSpec();
		traversalSpec.setName("VisitFolders");
		traversalSpec.setType("Folder");
		traversalSpec.setPath("childEntity");
		traversalSpec.setSkip(false);
		SelectionSpec[] sSpecArr = new SelectionSpec[] { sSpec,
				dataCenterToVMFolder };
		traversalSpec.setSelectSet(sSpecArr);

		return traversalSpec;
	}

	/**
	 * This method creates PropertyFilter for a VirtualMachine managed objects
	 * with the specified properties.
	 * 
	 * @param propertyArr
	 *            A String array of properties of VMs that are being monitored
	 * 
	 */
	public static ManagedObjectReference createPropertyFilter(
			String[] propertyArr) {
		ManagedObjectReference retVal = null;
		try {
			// Create Property Spec
			PropertySpec propertySpec = new PropertySpec();
			propertySpec.setAll(Boolean.FALSE);
			propertySpec.setPathSet(propertyArr);
			propertySpec.setType("VirtualMachine");
			PropertySpec[] propertySpecs = new PropertySpec[] { propertySpec };

			// Now create Object Spec
			ObjectSpec objectSpec = new ObjectSpec();
			objectSpec.setObj(ROOT_FOLDER);
			objectSpec.setSkip(Boolean.TRUE);
			TraversalSpec tSpec = getVMTraversalSpec();
			objectSpec.setSelectSet(new SelectionSpec[] { tSpec });
			ObjectSpec[] objectSpecs = new ObjectSpec[] { objectSpec };

			// Create PropertyFilterSpec using the PropertySpec and ObjectPec
			// created above.
			PropertyFilterSpec propertyFilterSpec = new PropertyFilterSpec();
			propertyFilterSpec.setPropSet(propertySpecs);
			propertyFilterSpec.setObjectSet(objectSpecs);

			retVal = VIM_PORT.createFilter(PROP_COLLECTOR, propertyFilterSpec,
					false);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return retVal;
	}

	public static void destroyPropertyFilter(ManagedObjectReference mor) {
		try {
			VIM_PORT.destroyPropertyFilter(mor);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void monitorProperties(String[] propArr) {
		ManagedObjectReference vmFilter = null;
		try {
			/********************************
			 ********************************
			 ***                          ***
			 ***   Your code goes here    ***
			 ***    (fill-in 1 of 1)      ***
			 ***                          ***
			 ********************************
			 ********************************
			 */
			vmFilter = createPropertyFilter(propArr);
			System.out.println("vmFilter : " + vmFilter.getType() + " : "
			+ vmFilter.get_value());
			// At the time of first invocation, we don't know the initial
			// version.
			// So, we start with empty string. When the waitForUpdates returns,
			// the UpdateSet contains the version, which needs to be used in the
			// invocations to track changes from that point.
			String version = "";
			System.out.println("-------------------");
			while (true) {
				UpdateSet updateSet = VIM_PORT.waitForUpdates(PROP_COLLECTOR, version);
				version = updateSet.getVersion();
				System.out.println("Update received: " + version);
				PropertyFilterUpdate[] pfuArr = updateSet.getFilterSet();
				for (PropertyFilterUpdate pfu : pfuArr) {
					System.out.println("-------------------");
					System.out.println("Filter val: "
					+ pfu.getFilter().getType() + " : "
					+ pfu.getFilter().get_value());
					ObjectUpdate[] ouArr = pfu.getObjectSet();
					for (ObjectUpdate ou : ouArr) {
						// System.out.println("Change type: " + ou.getKind());
						ManagedObjectReference mor = ou.getObj();
						System.out.println(mor.getType() + " : "
						+ getManagedEntityName(mor));
						System.out.println();
						PropertyChange[] pcArr = ou.getChangeSet();
						for (PropertyChange pc : pcArr) {
							System.out.println(" Property Name: "
							+ pc.getName());
							// System.out.println("Op: " + pc.getOp());
							System.out.println(" Property Val: " + pc.getVal()
							+ "\n");
						}
					}
					System.out.println("-------------------");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (vmFilter != null) {
				destroyPropertyFilter(vmFilter);
			}
		}
	}

	/**
	 * 
	 * @param mor
	 *            ManagedObjectReference of the managed object
	 * @return String name of the managed object
	 */
	public static String getManagedEntityName(ManagedObjectReference mor) {
		String retVal = null;
		try {
			// Create Property Spec
			PropertySpec propertySpec = new PropertySpec();
			propertySpec.setAll(Boolean.FALSE);
			propertySpec.setPathSet(new String[] { "name" });
			propertySpec.setType(mor.getType());
			PropertySpec[] propertySpecs = new PropertySpec[] { propertySpec };

			// Now create Object Spec
			ObjectSpec objectSpec = new ObjectSpec();
			objectSpec.setObj(mor);
			ObjectSpec[] objectSpecs = new ObjectSpec[] { objectSpec };

			// Create PropertyFilterSpec using the PropertySpec and ObjectPec
			// created above.
			PropertyFilterSpec propertyFilterSpec = new PropertyFilterSpec();
			propertyFilterSpec.setPropSet(propertySpecs);
			propertyFilterSpec.setObjectSet(objectSpecs);

			PropertyFilterSpec[] propertyFilterSpecs = new PropertyFilterSpec[] { propertyFilterSpec };

			ObjectContent[] oCont = VIM_PORT.retrieveProperties(PROP_COLLECTOR,
					propertyFilterSpecs);
			if (oCont != null) {
				// System.out.println("ObjectContent Length : " + oCont.length);
				for (ObjectContent oc : oCont) {
					// DynamicProperty[] dps = oc.getPropSet();
					DynamicProperty[] dps = oc.getPropSet();
					if (dps != null) {
						for (DynamicProperty dp : dps) {
							// System.out.println(dp.getName() + " : " +
							// dp.getVal());
							retVal = (String) dp.getVal();
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return retVal;
	}

	private static void printUsage() {
		System.out
				.println("Usage: java Ex3_MonitorProperties <host> <username> <password> <properties>");
	}

	/**
	 * @param args
	 *            arg[0] - URL of the Virtual Center Server / ESX host
	 *            https://<Server host name / ip>/sdk arg[1] - User name arg[2]
	 *            - Password arg[3] - VM name
	 */
	public static void main(String[] args) {
		// This is to accept all SSL certifcates by default.
		System.setProperty(
				"org.apache.axis.components.net.SecureSocketFactory",
				"org.apache.axis.components.net.SunFakeTrustSocketFactory");
		if (args.length < 4) {
			printUsage();
		} else {
			try {
				VIM_HOST = args[0];
				USER_NAME = args[1];
				PASSWORD = args[2];

				initAll();
				String properties = args[3];
				String[] propArr = properties.split(",");
				System.out.println("Monitoring the following properties: ");
				System.out.println("------------------------------------");
				for (String s : propArr) {
					System.out.println(s);
				}
				System.out.println();
				monitorProperties(propArr);
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					disconnect();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

}